// <auto-generated />
using System;
using JoygameInventory.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JoygameInventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20250127224521_Newmig01")]
    partial class Newmig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventoryAssigmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAssigmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviusAssigmenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PreviusAssigmenId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryAssigments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9115),
                            PreviusAssigmenId = 3,
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9119),
                            PreviusAssigmenId = 3,
                            ProductId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9120),
                            PreviusAssigmenId = 3,
                            ProductId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9122),
                            PreviusAssigmenId = 3,
                            ProductId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9123),
                            PreviusAssigmenId = 3,
                            ProductId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9124),
                            PreviusAssigmenId = 3,
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9125),
                            PreviusAssigmenId = 3,
                            ProductId = 7,
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9126),
                            PreviusAssigmenId = 3,
                            ProductId = 8,
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            AssignmentDate = new DateTime(2025, 1, 27, 22, 45, 21, 18, DateTimeKind.Utc).AddTicks(9127),
                            PreviusAssigmenId = 3,
                            ProductId = 9,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Madbyte"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Joygame"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Staff_Email");

                    b.ToTable("JoyStaffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "eren.sezen@joygame.com",
                            Name = "Eren",
                            PhoneNumber = "555-0101",
                            Surname = "Sezen"
                        },
                        new
                        {
                            Id = 2,
                            Email = "osman.benlice@joygame.com",
                            Name = "Osman",
                            PhoneNumber = "555-0102",
                            Surname = "Benlice"
                        },
                        new
                        {
                            Id = 3,
                            Email = "onur.unlu@joygame.com",
                            Name = "Onur",
                            PhoneNumber = "555-0103",
                            Surname = "Ünlü"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ali.karatas@joygame.com",
                            Name = "Ali",
                            PhoneNumber = "555-0104",
                            Surname = "Karataş"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ayse.duran@joygame.com",
                            Name = "Ayşe",
                            PhoneNumber = "555-0105",
                            Surname = "Duran"
                        },
                        new
                        {
                            Id = 6,
                            Email = "fatma.ozdemir@joygame.com",
                            Name = "Fatma",
                            PhoneNumber = "555-0106",
                            Surname = "Özdemir"
                        },
                        new
                        {
                            Id = 7,
                            Email = "mehmet.bayar@joygame.com",
                            Name = "Mehmet",
                            PhoneNumber = "555-0107",
                            Surname = "Bayar"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hasan.sahin@joygame.com",
                            Name = "Hasan",
                            PhoneNumber = "555-0108",
                            Surname = "Şahin"
                        },
                        new
                        {
                            Id = 9,
                            Email = "zeynep.kucuk@joygame.com",
                            Name = "Zeynep",
                            PhoneNumber = "555-0109",
                            Surname = "Küçük"
                        },
                        new
                        {
                            Id = 10,
                            Email = "yusuf.bozkurt@joygame.com",
                            Name = "Yusuf",
                            PhoneNumber = "555-0110",
                            Surname = "Bozkurt"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6be09e2d-ce2c-4b80-9871-93cc03a83d56",
                            Email = "eren.sezen@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Eren",
                            LastName = "Sezen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7efe5d3-aed6-4c34-8913-fc45fa206584",
                            TwoFactorEnabled = false,
                            UserName = "eren_sezen"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "985b6637-e797-4f67-8a80-73822cf653ed",
                            Email = "osman.benlice@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f961c54-d550-4047-93a3-9785f9552593",
                            TwoFactorEnabled = false,
                            UserName = "osman_benlice"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b620f990-adc5-4cf6-b366-66e5b464c1b0",
                            Email = "onur.unlu@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Onur",
                            LastName = "Ünlü",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16c035eb-83b9-480c-829c-fea0fe9caa7b",
                            TwoFactorEnabled = false,
                            UserName = "onur.unlu"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProductAddDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBarkod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Depoda");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-performance laptop",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB054",
                            ProductName = "Laptop",
                            SerialNumber = "3872-5930-4832",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wireless mouse",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB060",
                            ProductName = "Mouse",
                            SerialNumber = "3840294-9F5A3C2D",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mechanical keyboard",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB024",
                            ProductName = "Keyboard",
                            SerialNumber = "A2B3-5829-20250111",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 4,
                            Description = "27-inch 4K monitor",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB095",
                            ProductName = "Monitor",
                            SerialNumber = "WLG-384029-2024",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Noise-cancelling over-ear headphones",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB101",
                            ProductName = "Headphones",
                            SerialNumber = "HDP-230904",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 6,
                            Description = "128GB USB 3.0 Flash Drive",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB112",
                            ProductName = "USB Drive",
                            SerialNumber = "USB-3847502",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Latest model smartphone with 5G",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB130",
                            ProductName = "Smartphone",
                            SerialNumber = "SMP-1234A678",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 8,
                            Description = "10-inch tablet with stylus support",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB145",
                            ProductName = "Tablet",
                            SerialNumber = "TAB-5467D2025",
                            Status = "Zimmetli"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Fitness smartwatch with heart-rate monitor",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB162",
                            ProductName = "Smartwatch",
                            SerialNumber = "SW-9476253"
                        },
                        new
                        {
                            Id = 10,
                            Description = "High-DPI gaming mouse",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB170",
                            ProductName = "Gaming Mouse",
                            SerialNumber = "GM-845320"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Protective laptop sleeve",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB183",
                            ProductName = "Laptop Sleeve",
                            SerialNumber = "LS-210987"
                        },
                        new
                        {
                            Id = 12,
                            Description = "DSLR camera with 24MP sensor",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB195",
                            ProductName = "Camera",
                            SerialNumber = "CAM-584230"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Portable Bluetooth speaker with rich sound",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB210",
                            ProductName = "Bluetooth Speaker",
                            SerialNumber = "BTS-789403"
                        },
                        new
                        {
                            Id = 14,
                            Description = "10,000mAh power bank",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB230",
                            ProductName = "Power Bank",
                            SerialNumber = "PB-543210"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Virtual reality headset for immersive experiences",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB245",
                            ProductName = "VR Headset",
                            SerialNumber = "VR-902384"
                        },
                        new
                        {
                            Id = 16,
                            Description = "2TB external hard drive",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB260",
                            ProductName = "External Hard Drive",
                            SerialNumber = "EHDD-098723"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Ergonomic gaming chair",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB275",
                            ProductName = "Gaming Chair",
                            SerialNumber = "GC-765493"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Foldable electric scooter",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB280",
                            ProductName = "Electric Scooter",
                            SerialNumber = "ES-129845"
                        },
                        new
                        {
                            Id = 19,
                            Description = "4K camera drone with flight stabilization",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB295",
                            ProductName = "Drone",
                            SerialNumber = "DRN-589301"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Portable mini projector",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB310",
                            ProductName = "Projector",
                            SerialNumber = "PRJ-765123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.InventoryAssigment", null)
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("InventoryAssigmentId");

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "PreviusAssigmentUserNavigation")
                        .WithMany()
                        .HasForeignKey("PreviusAssigmenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviusAssigmentUserNavigation");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Navigation("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");
                });
#pragma warning restore 612, 618
        }
    }
}
