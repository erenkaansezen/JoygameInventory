// <auto-generated />
using System;
using JoygameInventory.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JoygameInventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventoryAssigmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAssigmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Masaüstü",
                            Url = "Masaüstü"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Notebook",
                            Url = "Notebook"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ekipman",
                            Url = "Ekipman"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Donanım",
                            Url = "Donanım"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviusAssigmenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PreviusAssigmenId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryAssigments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8319),
                            PreviusAssigmenId = 3,
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8322),
                            PreviusAssigmenId = 3,
                            ProductId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8323),
                            PreviusAssigmenId = 3,
                            ProductId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8325),
                            PreviusAssigmenId = 3,
                            ProductId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8326),
                            PreviusAssigmenId = 3,
                            ProductId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8327),
                            PreviusAssigmenId = 3,
                            ProductId = 16,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8328),
                            PreviusAssigmenId = 3,
                            ProductId = 18,
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8329),
                            PreviusAssigmenId = 3,
                            ProductId = 19,
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            AssignmentDate = new DateTime(2025, 1, 28, 22, 29, 58, 139, DateTimeKind.Utc).AddTicks(8330),
                            PreviusAssigmenId = 3,
                            ProductId = 20,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Madbyte"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Joygame"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Staff_Email");

                    b.ToTable("JoyStaffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "eren.sezen@joygame.com",
                            Name = "Eren",
                            PhoneNumber = "555-0101",
                            Surname = "Sezen"
                        },
                        new
                        {
                            Id = 2,
                            Email = "osman.benlice@joygame.com",
                            Name = "Osman",
                            PhoneNumber = "555-0102",
                            Surname = "Benlice"
                        },
                        new
                        {
                            Id = 3,
                            Email = "onur.unlu@joygame.com",
                            Name = "Onur",
                            PhoneNumber = "555-0103",
                            Surname = "Ünlü"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ali.karatas@joygame.com",
                            Name = "Ali",
                            PhoneNumber = "555-0104",
                            Surname = "Karataş"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ayse.duran@joygame.com",
                            Name = "Ayşe",
                            PhoneNumber = "555-0105",
                            Surname = "Duran"
                        },
                        new
                        {
                            Id = 6,
                            Email = "fatma.ozdemir@joygame.com",
                            Name = "Fatma",
                            PhoneNumber = "555-0106",
                            Surname = "Özdemir"
                        },
                        new
                        {
                            Id = 7,
                            Email = "mehmet.bayar@joygame.com",
                            Name = "Mehmet",
                            PhoneNumber = "555-0107",
                            Surname = "Bayar"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hasan.sahin@joygame.com",
                            Name = "Hasan",
                            PhoneNumber = "555-0108",
                            Surname = "Şahin"
                        },
                        new
                        {
                            Id = 9,
                            Email = "zeynep.kucuk@joygame.com",
                            Name = "Zeynep",
                            PhoneNumber = "555-0109",
                            Surname = "Küçük"
                        },
                        new
                        {
                            Id = 10,
                            Email = "yusuf.bozkurt@joygame.com",
                            Name = "Yusuf",
                            PhoneNumber = "555-0110",
                            Surname = "Bozkurt"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e92a068-3b5a-4ae9-badf-c2085e1a84b2",
                            Email = "eren.sezen@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Eren",
                            LastName = "Sezen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "831e7421-2427-4823-83a6-bff69dee1b8c",
                            TwoFactorEnabled = false,
                            UserName = "eren_sezen"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fe95ddb-7f2b-4361-a396-6c1f2fa00b9b",
                            Email = "osman.benlice@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3914e630-6cd3-4595-818f-4717c0825964",
                            TwoFactorEnabled = false,
                            UserName = "osman_benlice"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56cc80ea-d875-4691-a082-dd9996efb054",
                            Email = "onur.unlu@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Onur",
                            LastName = "Ünlü",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e03a0bcc-156d-4d7e-98d2-f69fd7d6b3a2",
                            TwoFactorEnabled = false,
                            UserName = "onur.unlu"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProductAddDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBarkod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Depoda");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-performance laptop",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB054",
                            ProductName = "Laptop1",
                            SerialNumber = "3872-5930-4832"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wireless mouse",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB060",
                            ProductName = "Ekipman1",
                            SerialNumber = "3840294-9F5A3C2D"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mechanical keyboard",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB024",
                            ProductName = "Ekipman2",
                            SerialNumber = "A2B3-5829-20250111"
                        },
                        new
                        {
                            Id = 4,
                            Description = "27-inch 4K monitor",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB095",
                            ProductName = "Ekipman3",
                            SerialNumber = "WLG-384029-2024"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Noise-cancelling over-ear headphones",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB101",
                            ProductName = "Ekipman4",
                            SerialNumber = "HDP-230904"
                        },
                        new
                        {
                            Id = 16,
                            Description = "2TB external hard drive",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB260",
                            ProductName = "Desktop1",
                            SerialNumber = "EHDD-098723"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Foldable electric scooter",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB280",
                            ProductName = "Desktop2",
                            SerialNumber = "ES-129845"
                        },
                        new
                        {
                            Id = 19,
                            Description = "4K camera drone with flight stabilization",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB295",
                            ProductName = "Donanım1",
                            SerialNumber = "DRN-589301"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Portable mini projector",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB310",
                            ProductName = "Donanım2",
                            SerialNumber = "PRJ-765123"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 16
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 18
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 4
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            CategoryId = 4,
                            ProductId = 19
                        },
                        new
                        {
                            CategoryId = 4,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.InventoryAssigment", null)
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("InventoryAssigmentId");

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "PreviusAssigmentUserNavigation")
                        .WithMany()
                        .HasForeignKey("PreviusAssigmenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviusAssigmentUserNavigation");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.ProductCategory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Navigation("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
