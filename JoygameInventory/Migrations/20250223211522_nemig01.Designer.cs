// <auto-generated />
using System;
using JoygameInventory.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JoygameInventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20250223211522_nemig01")]
    partial class nemig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventoryAssigmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAssigmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Masaüstü",
                            Url = "Masaüstü"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Notebook",
                            Url = "Notebook"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ekipman",
                            Url = "Ekipman"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Donanım",
                            Url = "Donanım"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviusAssigmenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PreviusAssigmenId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryAssigments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(371),
                            PreviusAssigmenId = 3,
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(373),
                            PreviusAssigmenId = 3,
                            ProductId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(374),
                            PreviusAssigmenId = 3,
                            ProductId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(375),
                            PreviusAssigmenId = 3,
                            ProductId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(376),
                            PreviusAssigmenId = 3,
                            ProductId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(378),
                            PreviusAssigmenId = 3,
                            ProductId = 16,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(379),
                            PreviusAssigmenId = 3,
                            ProductId = 18,
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(380),
                            PreviusAssigmenId = 3,
                            ProductId = 19,
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            AssignmentDate = new DateTime(2025, 2, 23, 21, 15, 22, 323, DateTimeKind.Utc).AddTicks(381),
                            PreviusAssigmenId = 3,
                            ProductId = 20,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Madbyte"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Joygame"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Staff_Email");

                    b.ToTable("JoyStaffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "eren.sezen@joygame.com",
                            Name = "Eren",
                            PhoneNumber = "555-0101",
                            Surname = "Sezen"
                        },
                        new
                        {
                            Id = 2,
                            Email = "osman.benlice@joygame.com",
                            Name = "Osman",
                            PhoneNumber = "555-0102",
                            Surname = "Benlice"
                        },
                        new
                        {
                            Id = 3,
                            Email = "onur.unlu@joygame.com",
                            Name = "Onur",
                            PhoneNumber = "555-0103",
                            Surname = "Ünlü"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ali.karatas@joygame.com",
                            Name = "Ali",
                            PhoneNumber = "555-0104",
                            Surname = "Karataş"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ayse.duran@joygame.com",
                            Name = "Ayşe",
                            PhoneNumber = "555-0105",
                            Surname = "Duran"
                        },
                        new
                        {
                            Id = 6,
                            Email = "fatma.ozdemir@joygame.com",
                            Name = "Fatma",
                            PhoneNumber = "555-0106",
                            Surname = "Özdemir"
                        },
                        new
                        {
                            Id = 7,
                            Email = "mehmet.bayar@joygame.com",
                            Name = "Mehmet",
                            PhoneNumber = "555-0107",
                            Surname = "Bayar"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hasan.sahin@joygame.com",
                            Name = "Hasan",
                            PhoneNumber = "555-0108",
                            Surname = "Şahin"
                        },
                        new
                        {
                            Id = 9,
                            Email = "zeynep.kucuk@joygame.com",
                            Name = "Zeynep",
                            PhoneNumber = "555-0109",
                            Surname = "Küçük"
                        },
                        new
                        {
                            Id = 10,
                            Email = "yusuf.bozkurt@joygame.com",
                            Name = "Yusuf",
                            PhoneNumber = "555-0110",
                            Surname = "Bozkurt"
                        },
                        new
                        {
                            Id = 11,
                            Email = "cihad.yilmazer@madbytegames.com",
                            Name = "Cihad",
                            PhoneNumber = "555-0110",
                            Surname = "Yılmazer"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "911fb35c-b8aa-4c03-97f2-01300816849b",
                            Email = "eren.sezen@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Eren",
                            LastName = "Sezen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09314e61-e559-47c6-92b5-10be47897a79",
                            TwoFactorEnabled = false,
                            UserName = "eren_sezen"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f07c791f-e4b5-4825-82ee-f4abf830677c",
                            Email = "osman.benlice@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faa9068a-fbfb-4359-a948-8b1b302fe914",
                            TwoFactorEnabled = false,
                            UserName = "osman_benlice"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5e6d529-638b-4820-bc1a-e0cde2160979",
                            Email = "onur.unlu@joygame.com",
                            EmailConfirmed = false,
                            FirstName = "Onur",
                            LastName = "Ünlü",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fac6f2a3-dc14-4da2-b307-a6562238b67a",
                            TwoFactorEnabled = false,
                            UserName = "onur.unlu"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Licence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LicenceActiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LicenceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LicenceName")
                        .IsUnique()
                        .HasDatabaseName("IX_Licence_LicenceName");

                    b.ToTable("Licence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LicenceActiveDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceEndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceName = "Adobe Creative Cloud"
                        },
                        new
                        {
                            Id = 2,
                            LicenceActiveDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceEndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceName = "Adobe Photoshop"
                        },
                        new
                        {
                            Id = 3,
                            LicenceActiveDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceEndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceName = "Adobe Substance"
                        },
                        new
                        {
                            Id = 4,
                            LicenceActiveDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceEndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenceName = "Autodesk 3dmax"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.LicenceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StaffId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("StaffId");

                    b.ToTable("LicenceUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LicenceId = 1,
                            StaffId = 1
                        },
                        new
                        {
                            Id = 2,
                            LicenceId = 1,
                            StaffId = 2
                        },
                        new
                        {
                            Id = 3,
                            LicenceId = 2,
                            StaffId = 3
                        },
                        new
                        {
                            Id = 4,
                            LicenceId = 2,
                            StaffId = 4
                        },
                        new
                        {
                            Id = 5,
                            LicenceId = 3,
                            StaffId = 5
                        },
                        new
                        {
                            Id = 6,
                            LicenceId = 3,
                            StaffId = 6
                        },
                        new
                        {
                            Id = 7,
                            LicenceId = 4,
                            StaffId = 7
                        },
                        new
                        {
                            Id = 8,
                            LicenceId = 4,
                            StaffId = 8
                        },
                        new
                        {
                            Id = 9,
                            LicenceId = 4,
                            StaffId = 9
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBarkod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductBarkod")
                        .IsUnique();

                    b.ToTable("Maintenance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaintenanceDescription = "Laptop1",
                            ProductBarkod = "JGNB054"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaintenanceDescription = "Ekipman1",
                            ProductBarkod = "JGNB060"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.MaintenanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBarkod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceAdress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductBarkod");

                    b.ToTable("MaintenanceHistory");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProductAddDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBarkod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductBrand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Ram")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Depoda");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductBarkod")
                        .IsUnique()
                        .HasDatabaseName("IX_Product_ProductBarkod");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-performance laptop",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB054",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Laptop1",
                            Ram = 0,
                            SerialNumber = "3872-5930-4832",
                            Storage = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wireless mouse",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB060",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Ekipman1",
                            Ram = 0,
                            SerialNumber = "3840294-9F5A3C2D",
                            Storage = ""
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mechanical keyboard",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB024",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Ekipman2",
                            Ram = 0,
                            SerialNumber = "A2B3-5829-20250111",
                            Storage = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "27-inch 4K monitor",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB095",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Ekipman3",
                            Ram = 0,
                            SerialNumber = "WLG-384029-2024",
                            Storage = ""
                        },
                        new
                        {
                            Id = 5,
                            Description = "Noise-cancelling over-ear headphones",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB101",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Ekipman4",
                            Ram = 0,
                            SerialNumber = "HDP-230904",
                            Storage = ""
                        },
                        new
                        {
                            Id = 16,
                            Description = "2TB external hard drive",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB260",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Desktop1",
                            Ram = 0,
                            SerialNumber = "EHDD-098723",
                            Storage = ""
                        },
                        new
                        {
                            Id = 18,
                            Description = "Foldable electric scooter",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB280",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Desktop2",
                            Ram = 0,
                            SerialNumber = "ES-129845",
                            Storage = ""
                        },
                        new
                        {
                            Id = 19,
                            Description = "4K camera drone with flight stabilization",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB295",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Donanım1",
                            Ram = 0,
                            SerialNumber = "DRN-589301",
                            Storage = ""
                        },
                        new
                        {
                            Id = 20,
                            Description = "Portable mini projector",
                            GraphicsCard = "",
                            Processor = "",
                            ProductAddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductBarkod = "JGNB310",
                            ProductBrand = "",
                            ProductModel = "",
                            ProductName = "Donanım2",
                            Ram = 0,
                            SerialNumber = "PRJ-765123",
                            Storage = ""
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ProductId = 18
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            ProductId = 19
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamName")
                        .IsUnique()
                        .HasDatabaseName("IX_Team_TeamName");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeamName = "Madbyte"
                        },
                        new
                        {
                            Id = 2,
                            TeamName = "JoyGame"
                        },
                        new
                        {
                            Id = 3,
                            TeamName = "DesertWarrior"
                        },
                        new
                        {
                            Id = 4,
                            TeamName = "Growth"
                        },
                        new
                        {
                            Id = 5,
                            TeamName = "AI"
                        });
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.UserTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StaffId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TeamId");

                    b.ToTable("userTeam");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StaffId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            StaffId = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            StaffId = 3,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            StaffId = 4,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 5,
                            StaffId = 5,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            StaffId = 6,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 7,
                            StaffId = 7,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 8,
                            StaffId = 8,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 9,
                            StaffId = 9,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 10,
                            StaffId = 10,
                            TeamId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.AssigmentHistory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.InventoryAssigment", null)
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("InventoryAssigmentId");

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("AssigmentHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "PreviusAssigmentUserNavigation")
                        .WithMany()
                        .HasForeignKey("PreviusAssigmenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "User")
                        .WithMany("InventoryAssigments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviusAssigmentUserNavigation");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.LicenceUser", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.Licence", "Licence")
                        .WithMany("LicenceUser")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "staff")
                        .WithMany("LicenceUser")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licence");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Maintenance", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("Maintenances")
                        .HasForeignKey("ProductBarkod")
                        .HasPrincipalKey("ProductBarkod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.MaintenanceHistory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("MaintenanceHistory")
                        .HasForeignKey("ProductBarkod")
                        .HasPrincipalKey("ProductBarkod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.ProductCategory", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.UserTeam", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyStaff", "Staff")
                        .WithMany("Teams")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.Team", "Team")
                        .WithMany("Teams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JoygameInventory.Data.Entities.JoyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.InventoryAssigment", b =>
                {
                    b.Navigation("AssigmentHistorys");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.JoyStaff", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");

                    b.Navigation("LicenceUser");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Licence", b =>
                {
                    b.Navigation("LicenceUser");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Product", b =>
                {
                    b.Navigation("AssigmentHistorys");

                    b.Navigation("InventoryAssigments");

                    b.Navigation("MaintenanceHistory");

                    b.Navigation("Maintenances");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("JoygameInventory.Data.Entities.Team", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
